# Generated by Django 4.2.3 on 2023-08-07 20:29

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='FitnessUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('age', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('profile_picture', models.ImageField(blank=True, max_length=500, null=True, upload_to='profile_pictures/')),
                ('height', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(50)], verbose_name='Height in sm')),
                ('weight', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(20)], verbose_name='Weight in kgs')),
                ('gender', models.CharField(choices=[('MALE', 'Male'), ('FEMALE', 'Female')], max_length=6)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('user_role', models.CharField(choices=[('TRAINER', 'Fitness Trainer'), ('FITNESS_ENTHUSIAST', 'Fitness Enthusiast')], max_length=18)),
                ('user_level', models.CharField(choices=[('BEGINNER', 'Beginner'), ('INTERMEDIATE', 'Intermediate'), ('ADVANCED', 'Advanced')], max_length=12)),
                ('user_goal', models.CharField(choices=[('lose_weight', 'Lose weight'), ('gain_muscle', 'Gain muscle'), ('maintain_weight', 'Maintain_weight')], max_length=15)),
                ('user_activity', models.CharField(choices=[('SEDENTARY', 'Sedentary (little to no exercise)'), ('LIGHT_ACTIVE', 'Lightly active (light exercise/sports 1-3 days/week)'), ('MODERATELY_ACTIVE', 'Moderately active (moderate exercise/sports 3-5 days/week)'), ('VERY_ACTIVE', 'Very active (hard exercise/sports 6-7 days/week)'), ('EXTRA_ACTIVE', 'Extra active (very hard exercise/sports and a physical job)')], max_length=59)),
                ('weight_change_intensity', models.CharField(choices=[('LIGHT', '0.2 kg per week'), ('MODERATE', '0.5 kg per week'), ('HIGH', '1 kg per week')], max_length=20)),
                ('maintenance_calories', models.IntegerField(default=0)),
                ('target_calories', models.IntegerField(default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Ingredients',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('description', models.TextField(blank=True, null=True)),
                ('calories', models.IntegerField(blank=True, null=True)),
                ('protein', models.IntegerField(blank=True, null=True, verbose_name='protein grams')),
                ('carbohydrates', models.IntegerField(blank=True, null=True, verbose_name='carbohydrate grams')),
                ('fats', models.IntegerField(blank=True, null=True, verbose_name='fat grams')),
                ('quantity', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='quantity')),
            ],
        ),
        migrations.CreateModel(
            name='Meal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(4)])),
                ('total_calories', models.IntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('list_of_ingredients', models.JSONField(blank=True, default=list, null=True)),
                ('total_protein', models.IntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_carbs', models.IntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_fats', models.IntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('name', 'user')},
            },
        ),
        migrations.CreateModel(
            name='DailyUserReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True)),
                ('daily_intake_calories', models.IntegerField(default=0)),
                ('daily_protein_intake', models.IntegerField(default=0)),
                ('daily_carbs_intake', models.IntegerField(default=0)),
                ('daily_fats_intake', models.IntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DailyCalorieIntake',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True)),
                ('total_protein', models.IntegerField(default=0)),
                ('total_carbs', models.IntegerField(default=0)),
                ('total_fats', models.IntegerField(default=0)),
                ('total_calories', models.IntegerField(default=0)),
                ('afternoon_snack', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='afternoon_snack_meals', to='accounts.meal')),
                ('breakfast', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='breakfast_meals', to='accounts.meal')),
                ('dinner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dinner_meals', to='accounts.meal')),
                ('evening_snack', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='evening_snack_meals', to='accounts.meal')),
                ('lunch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lunch_meals', to='accounts.meal')),
                ('morning_snack', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='morning_snack_meals', to='accounts.meal')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
