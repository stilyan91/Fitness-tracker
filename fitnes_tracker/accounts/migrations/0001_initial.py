# Generated by Django 4.2.3 on 2023-07-13 16:22

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='FitnessUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('age', models.PositiveIntegerField(default=0)),
                ('profile_picture', models.URLField(blank=True, max_length=500, null=True)),
                ('height', models.IntegerField(default=0, verbose_name='Height in sm')),
                ('weight', models.FloatField(default=0.0, verbose_name='Weight in kgs')),
                ('bmr', models.FloatField(blank=True, null=True)),
                ('gender', models.CharField(choices=[('MALE', 'Male'), ('FEMALE', 'Female')], max_length=6)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('user_role', models.CharField(choices=[('TRAINER', 'Fitness Trainer'), ('FITNESS_ENTHUSIAST', 'Fitness Enthusiast')], max_length=18)),
                ('user_level', models.CharField(choices=[('BEGINNER', 'Beginner'), ('INTERMEDIATE', 'Intermediate'), ('ADVANCED', 'Advanced')], max_length=12)),
                ('user_goal', models.CharField(choices=[('lose_weight', 'Lose weight'), ('gain_muscle', 'Gain muscle'), ('maintain_weight', 'Maintain_weight')], max_length=15)),
                ('user_activity', models.CharField(choices=[('SEDENTARY', 'Sedentary (little to no exercise)'), ('LIGHT_ACTIVE', 'Lightly active (light exercise/sports 1-3 days/week)'), ('MODERATELY_ACTIVE', 'Moderately active (moderate exercise/sports 3-5 days/week)'), ('VERY_ACTIVE', 'Very active (hard exercise/sports 6-7 days/week)'), ('EXTRA_ACTIVE', 'Extra active (very hard exercise/sports and a physical job)')], max_length=59)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('muscle_group', models.CharField(max_length=30)),
                ('description', models.TextField()),
                ('video_link', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Meal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('description', models.TextField()),
                ('calories', models.IntegerField()),
                ('protein', models.IntegerField(verbose_name='protein grams')),
                ('carbohydrates', models.IntegerField(verbose_name='carbohydrate grams')),
                ('fats', models.IntegerField(verbose_name='fat grams')),
            ],
        ),
        migrations.CreateModel(
            name='MealPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('meals', models.ManyToManyField(to='accounts.meal')),
            ],
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(auto_now_add=True)),
                ('duration', models.IntegerField(verbose_name='Duration (in weeks)')),
                ('end_date', models.DateField(blank=True, null=True)),
                ('meal_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.mealplan')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Workout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('description', models.TextField()),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('exercises', models.ManyToManyField(blank=True, null=True, to='accounts.exercise')),
            ],
        ),
        migrations.CreateModel(
            name='Progress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True)),
                ('weight', models.FloatField(verbose_name='Weight in kgs')),
                ('current_week', models.DateField()),
                ('body_fat_percentage', models.IntegerField(blank=True, null=True)),
                ('current_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.plan')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='plan',
            name='workouts',
            field=models.ManyToManyField(to='accounts.workout'),
        ),
    ]
